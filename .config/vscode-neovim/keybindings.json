[
  {
    "command": "editor.action.transformToUppercase",
    "key": "ctrl+alt+u"
  },
  {
    "command": "editor.action.transformToLowercase",
    "key": "ctrl+alt+i"
  },
  {
    "command": "actions.findWithSelection",
    "key": "shift+ctrl+e"
  },
  {
    "command": "-actions.findWithSelection",
    "key": "ctrl+e"
  },
  {
    "command": "workbench.view.explorer",
    "key": "ctrl+e"
  },
  {
    "command": "-workbench.view.explorer",
    "key": "shift+ctrl+e"
  },
  {
    "command": "renameFile",
    "key": "r",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "-renameFile",
    "key": "enter",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "list.focusDown",
    "key": "j",
    "when": "listFocus && explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "list.focusUp",
    "key": "k",
    "when": "listFocus && explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "selectNextSuggestion",
    "key": "ctrl+j",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "command": "selectPrevSuggestion",
    "key": "ctrl+k",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "command": "workbench.action.quickOpenNavigateNext",
    "key": "ctrl+j",
    "when": "inQuickOpen"
  },
  {
    "command": "workbench.action.navigateDown",
    "key": "ctrl+j"
  },
  {
    "command": "workbench.action.navigateUp",
    "key": "ctrl+k"
  },
  {
    "command": "workbench.action.quickOpenNavigatePrevious",
    "key": "ctrl+k",
    "when": "inQu"
  },
  {
    "command": "list.select",
    "key": "enter",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "command": "list.select",
    "key": "l",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "command": "list.toggleExpand",
    "key": "o",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "command": "list.collapse",
    "key": "h",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "command": "explorer.newFile",
    "key": "a",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "command": "explorer.newFolder",
    "key": "shift+a",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "command": "insertPrevSuggestion",
    "key": "shift+;",
    "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "command": "workbench.action.focusActiveEditorGroup",
    "key": "ctrl+l",
    "when": "sideBarFocus"
  },
  {
    "command": "workbench.action.focusActiveEditorGroup",
    "key": "ctrl+k",
    "when": "terminalFocus"
  },
  {
    "command": "workbench.action.terminal.focus",
    "key": "alt+t",
    "when": "!terminalFocus"
  },
  {
    "command": "-editor.action.insertLineAfter",
    "key": "ctrl+j",
    "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
  },
  {
    "command": "workbench.action.terminal.focus",
    "key": "alt+j",
    "when": "!terminalFocus"
  },
  {
    "command": "workbench.action.togglePanel",
    "key": "ctrl+shift+t"
  },
  {
    "command": "-workbench.action.togglePanel",
    "key": "ctrl+j"
  },
  {
    "command": "editor.action.showHover",
    "key": "shift+k",
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
    "command": "-editor.action.showHover",
    "key": "ctrl+k ctrl+i",
    "when": "editorTextFocus"
  },
  {
    "command": "-vscode-neovim.ctrl-f",
    "key": "ctrl+f",
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
    "command": "editor.action.addSelectionToNextFindMatch",
    "key": "ctrl+n",
    "when": "editorFocus"
  },
  {
    "command": "-editor.action.addSelectionToNextFindMatch",
    "key": "ctrl+d",
    "when": "editorFocus"
  },
  {
    "command": "-workbench.action.files.newUntitledFile",
    "key": "ctrl+n"
  },
  {
    "command": "extension.runSpecLine",
    "key": "ctrl+shift+f10",
    "when": "editorLangId == 'ruby'"
  },
  {
    "command": "extension.runJest",
    "key": "ctrl+shift+f10",
    "when": "editorLangId == 'javascript' || editorLangId == 'javascriptreact' || editorLangId == 'typescript'"
  },
  {
    "command": "workbench.action.terminal.focusNext",
    "key": "alt+j",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "command": "-workbench.action.terminal.focusNext",
    "key": "ctrl+pagedown",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "command": "workbench.action.terminal.focusPrevious",
    "key": "alt+k",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "command": "-workbench.action.terminal.focusPrevious",
    "key": "ctrl+pageup",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "command": "bookmarks.clear",
    "key": "ctrl+shift+alt+backspace"
  },
  {
    "command": "liveshare.join",
    "key": "ctrl+shift+alt+o",
    "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'"
  },
  {
    "command": "-liveshare.join",
    "key": "ctrl+alt+j",
    "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'"
  },
  {
    "command": "liveshare.join",
    "key": "ctrl+shift+alt+o",
    "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'"
  },
  {
    "command": "bookmarks.jumpToPrevious",
    "key": "ctrl+alt+k",
    "when": "editorTextFocus"
  },
  {
    "command": "-bookmarks.jumpToPrevious",
    "key": "ctrl+alt+j",
    "when": "editorTextFocus"
  },
  {
    "command": "bookmarks.toggle",
    "key": "ctrl+alt+l",
    "when": "editorTextFocus"
  },
  {
    "command": "-bookmarks.toggle",
    "key": "ctrl+alt+k",
    "when": "editorTextFocus"
  },
  {
    "command": "bookmarks.jumpToNext",
    "key": "ctrl+alt+j",
    "when": "editorTextFocus"
  },
  {
    "command": "-bookmarks.jumpToNext",
    "key": "ctrl+alt+l",
    "when": "editorTextFocus"
  },
  {
    "command": "vscode-easymotion.jumpToWord",
    "key": "alt+\\",
    "when": "editorTextFocus"
  },
  {
    "command": "-vscode-easymotion.jumpToWord",
    "key": "alt+/",
    "when": "editorTextFocus"
  },
  {
    "command": "-vscode-neovim.escape",
    "key": "ctrl+[",
    "when": "editorTextFocus && neovim.init"
  },
  {
    "command": "workbench.action.openPreviousRecentlyUsedEditor",
    "key": "ctrl+[",
    "when": "editorTextFocus"
  },
  {
    "command": "workbench.action.openNextRecentlyUsedEditor",
    "key": "ctrl+]",
    "when": "editorTextFocus"
  },
  {
    "command": "-vscode-neovim.send",
    "key": "ctrl+]",
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
    "command": "workbench.action.quickOpen",
    "key": "ctrl+p"
  },
  {
    "command": "actions.find",
    "key": "ctrl+f"
  },
  {
    "command": "workbench.action.navigateLeft",
    "key": "ctrl+h"
  },
  {
    "command": "workbench.action.navigateRight",
    "key": "ctrl+l"
  },
  {
    "command": "-showNextParameterHint",
    "key": "ctrl+n",
    "when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "command": "editor.action.moveLinesUpAction",
    "key": "alt+k",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "-editor.action.moveLinesUpAction",
    "key": "alt+up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "editor.action.moveLinesDownAction",
    "key": "alt+j",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "-editor.action.moveLinesDownAction",
    "key": "alt+down",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "command": "workbench.action.toggleMaximizedPanel",
    "key": "alt+m"
  },
  {
    "command": "liveshare.focusParticipants",
    "key": "ctrl+alt+d"
  },
  {
    "command": "workbench.action.moveEditorLeftInGroup",
    "key": "ctrl+alt+i",
    "when": "editorTextFocus"
  },
  {
    "command": "-workbench.action.moveEditorLeftInGroup",
    "key": "ctrl+shift+pageup"
  },
  {
    "command": "workbench.action.moveEditorRightInGroup",
    "key": "ctrl+alt+o",
    "when": "editorTextFocus"
  },
  {
    "command": "-workbench.action.moveEditorRightInGroup",
    "key": "ctrl+shift+pagedown"
  },
  {
    "command": "extension.CompileRun",
    "key": "ctrl+shift+f10",
    "when": "editorLangId == 'c' || editorLangId == 'cc' || editorLangId == 'cpp'"
  },
  {
    "command": "-extension.CompileRun",
    "key": "ctrl+6",
    "when": "editorLangId == 'c' || editorLangId == 'cc' || editorLangId == 'cpp'"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "f",
    "command": "explorer.newFolder",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  }
]
