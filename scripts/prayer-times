#!/usr/bin/python

import urllib.request
import json
from datetime import datetime
from datetime import timedelta
from pathlib import Path

CITY = 'Ponorogo'
COUNTRY = 'ID'
FIRST_PRAY = 'Imsak'
ADDED_MINUTES = 2
CONFIG_DIR = Path.home() / '.config/prayer-times/'
CONFIG_FILE = CONFIG_DIR / 'config.json'


def time_adjuster(pray_time, adjuster):
    parsed_time = datetime.strptime(pray_time, "%H:%M")
    adjusted_pray_time = parsed_time + timedelta(minutes=adjuster)
    pray_time_int = adjusted_pray_time.time()
    prayer_time_text = adjusted_pray_time.strftime("%H:%M")

    return {'time': pray_time_int, 'text': prayer_time_text}


def get_config(config_dir, config_file):
    config_dir.mkdir(parents=True, exist_ok=True)
    config_file.touch(exist_ok=True)

    prayer_data_file_cache = open(config_file)
    json_data = prayer_data_file_cache.read() or '{}'
    prayer_data_file_cache.close()

    return json.loads(json_data)


def refresh_cache(config_file, city, country):
    url = 'https://api.aladhan.com/timingsByCity?city=%s&country=%s' % (city, country)
    with urllib.request.urlopen(url) as response:
        html = response.read()

    prayer_data = json.loads(html)['data']

    with open(config_file, 'w+', encoding='utf-8') as f:
        json.dump(prayer_data, f, ensure_ascii=False, indent=4)


def cache_check():
    current_date_formatted = datetime.now().strftime("%d %b %Y")
    config = get_config(CONFIG_DIR, CONFIG_FILE)

    is_config_empty = 'date' not in config
    is_version_outdated = 'date' in config and config['date']['readable'] != current_date_formatted

    if is_config_empty or is_version_outdated:
        refresh_cache(CONFIG_FILE, CITY, COUNTRY)


def get_prayer_times():
    cache_check()
    config = get_config(CONFIG_DIR, CONFIG_FILE)

    timings = config['timings']
    del timings['Sunset']
    del timings['Midnight']
    del timings['Firstthird']
    del timings['Lastthird']

    current_time = datetime.now().time()
    next_prayer = {'name': FIRST_PRAY, 'time': time_adjuster(timings[FIRST_PRAY], ADDED_MINUTES)['text']}

    sorted_timings = sorted(timings.items(), key=lambda d: d[1])

    for name, time in sorted_timings:
        prayer_time = time_adjuster(timings[name], ADDED_MINUTES)

        if current_time <= prayer_time['time']:
            next_prayer = {'name': name, 'time': prayer_time['text']}
            break

    return next_prayer


next_prayer_times = get_prayer_times()
print("%s at %s" % (next_prayer_times['name'], next_prayer_times['time']))
